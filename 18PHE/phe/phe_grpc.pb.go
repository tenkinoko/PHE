// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package phe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PheWorkflowClient is the client API for PheWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PheWorkflowClient interface {
	ReceivePubkey(ctx context.Context, in *PubkeyRecord, opts ...grpc.CallOption) (*PubkeyResponse, error)
	GetEnrollment(ctx context.Context, in *GetEnrollRecord, opts ...grpc.CallOption) (*EnrollmentResponse, error)
	EnrollAccount(ctx context.Context, in *EnrollmentRecord, opts ...grpc.CallOption) (*EnrollmentResponse, error)
	VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*VerifyPasswordResponse, error)
	Rotate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateToken, error)
}

type pheWorkflowClient struct {
	cc grpc.ClientConnInterface
}

func NewPheWorkflowClient(cc grpc.ClientConnInterface) PheWorkflowClient {
	return &pheWorkflowClient{cc}
}

func (c *pheWorkflowClient) ReceivePubkey(ctx context.Context, in *PubkeyRecord, opts ...grpc.CallOption) (*PubkeyResponse, error) {
	out := new(PubkeyResponse)
	err := c.cc.Invoke(ctx, "/phe.phe_workflow/ReceivePubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pheWorkflowClient) GetEnrollment(ctx context.Context, in *GetEnrollRecord, opts ...grpc.CallOption) (*EnrollmentResponse, error) {
	out := new(EnrollmentResponse)
	err := c.cc.Invoke(ctx, "/phe.phe_workflow/GetEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pheWorkflowClient) EnrollAccount(ctx context.Context, in *EnrollmentRecord, opts ...grpc.CallOption) (*EnrollmentResponse, error) {
	out := new(EnrollmentResponse)
	err := c.cc.Invoke(ctx, "/phe.phe_workflow/EnrollAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pheWorkflowClient) VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*VerifyPasswordResponse, error) {
	out := new(VerifyPasswordResponse)
	err := c.cc.Invoke(ctx, "/phe.phe_workflow/VerifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pheWorkflowClient) Rotate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateToken, error) {
	out := new(UpdateToken)
	err := c.cc.Invoke(ctx, "/phe.phe_workflow/Rotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PheWorkflowServer is the server API for PheWorkflow service.
// All implementations must embed UnimplementedPheWorkflowServer
// for forward compatibility
type PheWorkflowServer interface {
	ReceivePubkey(context.Context, *PubkeyRecord) (*PubkeyResponse, error)
	GetEnrollment(context.Context, *GetEnrollRecord) (*EnrollmentResponse, error)
	EnrollAccount(context.Context, *EnrollmentRecord) (*EnrollmentResponse, error)
	VerifyPassword(context.Context, *VerifyPasswordRequest) (*VerifyPasswordResponse, error)
	Rotate(context.Context, *UpdateRequest) (*UpdateToken, error)
	mustEmbedUnimplementedPheWorkflowServer()
}

// UnimplementedPheWorkflowServer must be embedded to have forward compatible implementations.
type UnimplementedPheWorkflowServer struct {
}

func (UnimplementedPheWorkflowServer) ReceivePubkey(context.Context, *PubkeyRecord) (*PubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePubkey not implemented")
}
func (UnimplementedPheWorkflowServer) GetEnrollment(context.Context, *GetEnrollRecord) (*EnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollment not implemented")
}
func (UnimplementedPheWorkflowServer) EnrollAccount(context.Context, *EnrollmentRecord) (*EnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollAccount not implemented")
}
func (UnimplementedPheWorkflowServer) VerifyPassword(context.Context, *VerifyPasswordRequest) (*VerifyPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPassword not implemented")
}
func (UnimplementedPheWorkflowServer) Rotate(context.Context, *UpdateRequest) (*UpdateToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedPheWorkflowServer) mustEmbedUnimplementedPheWorkflowServer() {}

// UnsafePheWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PheWorkflowServer will
// result in compilation errors.
type UnsafePheWorkflowServer interface {
	mustEmbedUnimplementedPheWorkflowServer()
}

func RegisterPheWorkflowServer(s grpc.ServiceRegistrar, srv PheWorkflowServer) {
	s.RegisterService(&PheWorkflow_ServiceDesc, srv)
}

func _PheWorkflow_ReceivePubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubkeyRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PheWorkflowServer).ReceivePubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.phe_workflow/ReceivePubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PheWorkflowServer).ReceivePubkey(ctx, req.(*PubkeyRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _PheWorkflow_GetEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrollRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PheWorkflowServer).GetEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.phe_workflow/GetEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PheWorkflowServer).GetEnrollment(ctx, req.(*GetEnrollRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _PheWorkflow_EnrollAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollmentRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PheWorkflowServer).EnrollAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.phe_workflow/EnrollAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PheWorkflowServer).EnrollAccount(ctx, req.(*EnrollmentRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _PheWorkflow_VerifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PheWorkflowServer).VerifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.phe_workflow/VerifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PheWorkflowServer).VerifyPassword(ctx, req.(*VerifyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PheWorkflow_Rotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PheWorkflowServer).Rotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.phe_workflow/Rotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PheWorkflowServer).Rotate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PheWorkflow_ServiceDesc is the grpc.ServiceDesc for PheWorkflow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PheWorkflow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "phe.phe_workflow",
	HandlerType: (*PheWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceivePubkey",
			Handler:    _PheWorkflow_ReceivePubkey_Handler,
		},
		{
			MethodName: "GetEnrollment",
			Handler:    _PheWorkflow_GetEnrollment_Handler,
		},
		{
			MethodName: "EnrollAccount",
			Handler:    _PheWorkflow_EnrollAccount_Handler,
		},
		{
			MethodName: "VerifyPassword",
			Handler:    _PheWorkflow_VerifyPassword_Handler,
		},
		{
			MethodName: "Rotate",
			Handler:    _PheWorkflow_Rotate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phe/phe.proto",
}
