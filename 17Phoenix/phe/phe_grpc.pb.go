// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package phe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PheWorkflowClient is the client API for PheWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PheWorkflowClient interface {
	Setup(ctx context.Context, in *SetupC, opts ...grpc.CallOption) (*SetupS, error)
	Enrollment(ctx context.Context, in *EnrollmentC, opts ...grpc.CallOption) (*EnrollmentS, error)
	Validation(ctx context.Context, in *ValidationC, opts ...grpc.CallOption) (*ValidationS, error)
	Rotation(ctx context.Context, in *RotationC, opts ...grpc.CallOption) (*RotationS, error)
}

type pheWorkflowClient struct {
	cc grpc.ClientConnInterface
}

func NewPheWorkflowClient(cc grpc.ClientConnInterface) PheWorkflowClient {
	return &pheWorkflowClient{cc}
}

func (c *pheWorkflowClient) Setup(ctx context.Context, in *SetupC, opts ...grpc.CallOption) (*SetupS, error) {
	out := new(SetupS)
	err := c.cc.Invoke(ctx, "/phe.phe_workflow/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pheWorkflowClient) Enrollment(ctx context.Context, in *EnrollmentC, opts ...grpc.CallOption) (*EnrollmentS, error) {
	out := new(EnrollmentS)
	err := c.cc.Invoke(ctx, "/phe.phe_workflow/Enrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pheWorkflowClient) Validation(ctx context.Context, in *ValidationC, opts ...grpc.CallOption) (*ValidationS, error) {
	out := new(ValidationS)
	err := c.cc.Invoke(ctx, "/phe.phe_workflow/Validation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pheWorkflowClient) Rotation(ctx context.Context, in *RotationC, opts ...grpc.CallOption) (*RotationS, error) {
	out := new(RotationS)
	err := c.cc.Invoke(ctx, "/phe.phe_workflow/Rotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PheWorkflowServer is the server API for PheWorkflow service.
// All implementations must embed UnimplementedPheWorkflowServer
// for forward compatibility
type PheWorkflowServer interface {
	Setup(context.Context, *SetupC) (*SetupS, error)
	Enrollment(context.Context, *EnrollmentC) (*EnrollmentS, error)
	Validation(context.Context, *ValidationC) (*ValidationS, error)
	Rotation(context.Context, *RotationC) (*RotationS, error)
	mustEmbedUnimplementedPheWorkflowServer()
}

// UnimplementedPheWorkflowServer must be embedded to have forward compatible implementations.
type UnimplementedPheWorkflowServer struct {
}

func (UnimplementedPheWorkflowServer) Setup(context.Context, *SetupC) (*SetupS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedPheWorkflowServer) Enrollment(context.Context, *EnrollmentC) (*EnrollmentS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enrollment not implemented")
}
func (UnimplementedPheWorkflowServer) Validation(context.Context, *ValidationC) (*ValidationS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validation not implemented")
}
func (UnimplementedPheWorkflowServer) Rotation(context.Context, *RotationC) (*RotationS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotation not implemented")
}
func (UnimplementedPheWorkflowServer) mustEmbedUnimplementedPheWorkflowServer() {}

// UnsafePheWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PheWorkflowServer will
// result in compilation errors.
type UnsafePheWorkflowServer interface {
	mustEmbedUnimplementedPheWorkflowServer()
}

func RegisterPheWorkflowServer(s grpc.ServiceRegistrar, srv PheWorkflowServer) {
	s.RegisterService(&PheWorkflow_ServiceDesc, srv)
}

func _PheWorkflow_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PheWorkflowServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.phe_workflow/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PheWorkflowServer).Setup(ctx, req.(*SetupC))
	}
	return interceptor(ctx, in, info, handler)
}

func _PheWorkflow_Enrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollmentC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PheWorkflowServer).Enrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.phe_workflow/Enrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PheWorkflowServer).Enrollment(ctx, req.(*EnrollmentC))
	}
	return interceptor(ctx, in, info, handler)
}

func _PheWorkflow_Validation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PheWorkflowServer).Validation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.phe_workflow/Validation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PheWorkflowServer).Validation(ctx, req.(*ValidationC))
	}
	return interceptor(ctx, in, info, handler)
}

func _PheWorkflow_Rotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotationC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PheWorkflowServer).Rotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.phe_workflow/Rotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PheWorkflowServer).Rotation(ctx, req.(*RotationC))
	}
	return interceptor(ctx, in, info, handler)
}

// PheWorkflow_ServiceDesc is the grpc.ServiceDesc for PheWorkflow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PheWorkflow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "phe.phe_workflow",
	HandlerType: (*PheWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _PheWorkflow_Setup_Handler,
		},
		{
			MethodName: "Enrollment",
			Handler:    _PheWorkflow_Enrollment_Handler,
		},
		{
			MethodName: "Validation",
			Handler:    _PheWorkflow_Validation_Handler,
		},
		{
			MethodName: "Rotation",
			Handler:    _PheWorkflow_Rotation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phe/phe.proto",
}
