// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sgx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PHEClient is the client API for PHE service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PHEClient interface {
	// Sends a greeting
	Negotiation(ctx context.Context, in *NegoRequest, opts ...grpc.CallOption) (*NegoReply, error)
	Decryption(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptReply, error)
}

type pHEClient struct {
	cc grpc.ClientConnInterface
}

func NewPHEClient(cc grpc.ClientConnInterface) PHEClient {
	return &pHEClient{cc}
}

func (c *pHEClient) Negotiation(ctx context.Context, in *NegoRequest, opts ...grpc.CallOption) (*NegoReply, error) {
	out := new(NegoReply)
	err := c.cc.Invoke(ctx, "/sgx.PHE/Negotiation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pHEClient) Decryption(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptReply, error) {
	out := new(DecryptReply)
	err := c.cc.Invoke(ctx, "/sgx.PHE/Decryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PHEServer is the server API for PHE service.
// All implementations must embed UnimplementedPHEServer
// for forward compatibility
type PHEServer interface {
	// Sends a greeting
	Negotiation(context.Context, *NegoRequest) (*NegoReply, error)
	Decryption(context.Context, *DecryptRequest) (*DecryptReply, error)
	mustEmbedUnimplementedPHEServer()
}

// UnimplementedPHEServer must be embedded to have forward compatible implementations.
type UnimplementedPHEServer struct {
}

func (UnimplementedPHEServer) Negotiation(context.Context, *NegoRequest) (*NegoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Negotiation not implemented")
}
func (UnimplementedPHEServer) Decryption(context.Context, *DecryptRequest) (*DecryptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decryption not implemented")
}
func (UnimplementedPHEServer) mustEmbedUnimplementedPHEServer() {}

// UnsafePHEServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PHEServer will
// result in compilation errors.
type UnsafePHEServer interface {
	mustEmbedUnimplementedPHEServer()
}

func RegisterPHEServer(s grpc.ServiceRegistrar, srv PHEServer) {
	s.RegisterService(&PHE_ServiceDesc, srv)
}

func _PHE_Negotiation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NegoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PHEServer).Negotiation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgx.PHE/Negotiation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PHEServer).Negotiation(ctx, req.(*NegoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PHE_Decryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PHEServer).Decryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgx.PHE/Decryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PHEServer).Decryption(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PHE_ServiceDesc is the grpc.ServiceDesc for PHE service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PHE_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sgx.PHE",
	HandlerType: (*PHEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Negotiation",
			Handler:    _PHE_Negotiation_Handler,
		},
		{
			MethodName: "Decryption",
			Handler:    _PHE_Decryption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgx/sgx.proto",
}
