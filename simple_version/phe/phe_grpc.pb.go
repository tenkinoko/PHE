// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package phe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyPairGenClient is the client API for KeyPairGen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyPairGenClient interface {
	Negotiation(ctx context.Context, in *NegotiationBegin, opts ...grpc.CallOption) (*NegotiationResponse, error)
}

type keyPairGenClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyPairGenClient(cc grpc.ClientConnInterface) KeyPairGenClient {
	return &keyPairGenClient{cc}
}

func (c *keyPairGenClient) Negotiation(ctx context.Context, in *NegotiationBegin, opts ...grpc.CallOption) (*NegotiationResponse, error) {
	out := new(NegotiationResponse)
	err := c.cc.Invoke(ctx, "/phe.KeyPairGen/Negotiation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyPairGenServer is the server API for KeyPairGen service.
// All implementations must embed UnimplementedKeyPairGenServer
// for forward compatibility
type KeyPairGenServer interface {
	Negotiation(context.Context, *NegotiationBegin) (*NegotiationResponse, error)
	mustEmbedUnimplementedKeyPairGenServer()
}

// UnimplementedKeyPairGenServer must be embedded to have forward compatible implementations.
type UnimplementedKeyPairGenServer struct {
}

func (UnimplementedKeyPairGenServer) Negotiation(context.Context, *NegotiationBegin) (*NegotiationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Negotiation not implemented")
}
func (UnimplementedKeyPairGenServer) mustEmbedUnimplementedKeyPairGenServer() {}

// UnsafeKeyPairGenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyPairGenServer will
// result in compilation errors.
type UnsafeKeyPairGenServer interface {
	mustEmbedUnimplementedKeyPairGenServer()
}

func RegisterKeyPairGenServer(s grpc.ServiceRegistrar, srv KeyPairGenServer) {
	s.RegisterService(&KeyPairGen_ServiceDesc, srv)
}

func _KeyPairGen_Negotiation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NegotiationBegin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyPairGenServer).Negotiation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phe.KeyPairGen/Negotiation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyPairGenServer).Negotiation(ctx, req.(*NegotiationBegin))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyPairGen_ServiceDesc is the grpc.ServiceDesc for KeyPairGen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyPairGen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "phe.KeyPairGen",
	HandlerType: (*KeyPairGenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Negotiation",
			Handler:    _KeyPairGen_Negotiation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phe/phe.proto",
}
